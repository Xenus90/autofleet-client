{"version":3,"sources":["assets/logo.png","components/controls.component.tsx","components/error.component.tsx","configs/configs.ts","components/map.component.tsx","api/vehicles.api.ts","pages/home.page.tsx","index.tsx"],"names":["ControlsComponent","props","isLoading","polygonPointsLength","vehicles","onFindVehicles","onClearPolygonPoints","src","logo","alt","style","width","height","Box","display","justifyContent","my","Typography","variant","alignItems","CircularProgress","mt","Button","disabled","onClick","color","length","overflow","List","map","vehicle","index","ListItem","ListItemText","primary","id","secondary","state","ErrorComponent","message","configs","MapComponent","polygonPoints","setPolygonPoints","useLoadScript","googleMapsApiKey","isLoaded","loadError","mapContainerStyle","center","lat","lng","zoom","options","disableDefaultUI","zoomControl","e","latLng","prevState","paths","onRightClick","point","position","location","VehiclesApi","getAllVehicles","a","axios","get","getVehiclesWithinArea","area","post","HomePage","useState","setIsLoading","isOpen","text","severity","snackbarData","setSnackbarData","setVehicles","polygonPoint","result","data","closeSnackbar","Grid","container","item","xs","Snackbar","open","autoHideDuration","onClose","Alert","sx","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.457010a3.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.7b43f9ea.png\";","import { Box, Typography, Button, List, ListItem, ListItemText, CircularProgress } from '@mui/material';\r\nimport { Vehicle } from '../api/vehicles.api.models';\r\nimport logo from '../assets/logo.png';\r\n\r\ntype Props = {\r\n    isLoading: boolean,\r\n    polygonPointsLength: number,\r\n    vehicles: Vehicle[],\r\n    onFindVehicles: () => void,\r\n    onClearPolygonPoints: () => void,\r\n};\r\n\r\nexport const ControlsComponent = (props: Props) => {\r\n    const { isLoading, polygonPointsLength, vehicles, onFindVehicles, onClearPolygonPoints } = props;\r\n\r\n    return (\r\n        <>\r\n            <img src={logo} alt=\"logo\" style={{ width: '90%', height: 'auto' }} />\r\n            <Box display=\"flex\" justifyContent=\"center\" my={2}>\r\n                <Typography variant=\"h5\">Controls</Typography>\r\n            </Box>\r\n            {isLoading ? (\r\n                <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\">\r\n                    <CircularProgress />\r\n                </Box>\r\n            ) : (\r\n                <>\r\n                    <Box>\r\n                        <Typography>{`Selected points: ${polygonPointsLength}/4`}</Typography>\r\n                    </Box>\r\n                    <Box mt={2} display=\"flex\" justifyContent=\"space-around\">\r\n                        <Button variant=\"outlined\" disabled={polygonPointsLength !== 4} onClick={onFindVehicles}>Find vehicles</Button>\r\n                        <Button variant=\"outlined\" color=\"error\" onClick={onClearPolygonPoints}>Delete polygon</Button>\r\n                    </Box >\r\n                    <Box mt={2}>\r\n                        <Typography variant=\"subtitle2\">*Right mouse click on polygon will delete it</Typography>\r\n                    </Box>\r\n                    {vehicles.length === 0 ? (\r\n                        <Box mt={4} display=\"flex\" justifyContent=\"center\">\r\n                            <Typography>No vehicles found</Typography>\r\n                        </Box>\r\n                    ) : (\r\n                        <Box>\r\n                            <Box mt={4} display=\"flex\" justifyContent=\"center\">\r\n                                <Typography variant=\"h6\">{`Found ${vehicles.length} vehicles`}</Typography>\r\n                            </Box>\r\n                            <Box height=\"75vh\" overflow=\"auto\">\r\n                                <List>\r\n                                    {vehicles.map((vehicle, index) => (\r\n                                        <ListItem key={index}>\r\n                                            <ListItemText\r\n                                                primary={`Id: ${vehicle.id}`}\r\n                                                secondary={`State: ${vehicle.state}`}\r\n                                            />\r\n                                        </ListItem>\r\n                                    ))}\r\n                                </List>\r\n                            </Box>\r\n                        </Box>\r\n                    )}\r\n                </>)}\r\n        </>\r\n    );\r\n};\r\n","import { Box, Typography } from '@mui/material';\r\n\r\ntype Props = {\r\n    message: string,\r\n}\r\n\r\nexport const ErrorComponent = (props: Props) => {\r\n    const { message } = props;\r\n\r\n    return (\r\n        <Box height=\"100vh\" display=\"flex\" justifyContent=\"center\" alignItems=\"center\">\r\n            <Typography variant=\"h2\">{message}</Typography>\r\n        </Box>\r\n    );\r\n};\r\n","export const configs = {\r\n    api: 'https://autofleet-server.herokuapp.com',\r\n    googleMapsKey: 'AIzaSyC1jmyJkkn8VkVhxiYKk7w4u3xBhSzpkCk',\r\n};\r\n","import { GoogleMap, useLoadScript, Polygon, Marker } from '@react-google-maps/api';\r\nimport { ErrorComponent } from './error.component';\r\nimport { Vehicle } from '../api/vehicles.api.models';\r\nimport { configs } from '../configs/configs';\r\n\r\ntype Props = {\r\n    vehicles: Vehicle[],\r\n    polygonPoints: { lat: number, lng: number }[],\r\n    setPolygonPoints: React.Dispatch<React.SetStateAction<{ lat: number, lng: number }[]>>,\r\n    onClearPolygonPoints: () => void,\r\n};\r\n\r\nexport const MapComponent = (props: Props) => {\r\n    const { vehicles, polygonPoints, setPolygonPoints, onClearPolygonPoints } = props;\r\n    const { isLoaded, loadError } = useLoadScript({ googleMapsApiKey: configs.googleMapsKey });\r\n\r\n    const onMapClick = (e: any) => {\r\n        if (polygonPoints.length < 4) {\r\n            const { lat, lng } = e.latLng;\r\n            setPolygonPoints(prevState => ([...prevState, { lat: lat(), lng: lng() }]));\r\n        }\r\n    };\r\n\r\n    return loadError\r\n        ? <ErrorComponent message=\"Error loading map\" />\r\n        : !isLoaded\r\n            ? <ErrorComponent message=\"Loading maps\" />\r\n            : (\r\n                <GoogleMap\r\n                    mapContainerStyle={{ width: '100%', height: '100%' }}\r\n                    center={{ lat: 51.5194136, lng: -0.1334216 }}\r\n                    zoom={12}\r\n                    options={{ disableDefaultUI: true, zoomControl: true }}\r\n                    onClick={onMapClick}\r\n                >\r\n                    <Polygon\r\n                        paths={polygonPoints}\r\n                        onRightClick={onClearPolygonPoints}\r\n                    />\r\n                    {polygonPoints.map((point, index) => (\r\n                        <Marker\r\n                            key={index}\r\n                            position={{ lat: point.lat, lng: point.lng }}\r\n                        />\r\n                    ))}\r\n                    {vehicles.map((vehicle, index) => (\r\n                        <Marker\r\n                            key={index}\r\n                            position={{ lat: vehicle.location.lat, lng: vehicle.location.lng }}\r\n                        />\r\n                    ))}\r\n                </GoogleMap>\r\n            );\r\n};\r\n","import axios from 'axios';\r\nimport { configs } from '../configs/configs';\r\nimport { VehiclesResponse } from './vehicles.api.models';\r\n\r\nexport class VehiclesApi {\r\n    static getAllVehicles = async () => {\r\n        return await axios.get<VehiclesResponse>(`${configs.api}/vehicles`);\r\n    };\r\n\r\n    static getVehiclesWithinArea = async (area: number[][]) => {\r\n        return await axios.post<VehiclesResponse>(`${configs.api}/vehicles`, area);\r\n    };\r\n}\r\n","import { useState } from 'react';\r\nimport { Grid, Box, Snackbar, Alert } from '@mui/material';\r\nimport { ControlsComponent } from '../components/controls.component';\r\nimport { MapComponent } from '../components/map.component';\r\nimport { VehiclesApi } from '../api/vehicles.api';\r\nimport { Vehicle } from '../api/vehicles.api.models';\r\n\r\nexport const HomePage = () => {\r\n    const [isLoading, setIsLoading] = useState<boolean>(false);\r\n    const [snackbarData, setSnackbarData] = useState<{ isOpen: boolean, text: string, severity: 'error' | 'success' }>({ isOpen: false, text: '', severity: 'success' });\r\n    const [polygonPoints, setPolygonPoints] = useState<{ lat: number, lng: number }[]>([]);\r\n    const [vehicles, setVehicles] = useState<Vehicle[]>([]);\r\n\r\n    const onFindVehicles = async () => {\r\n        try {\r\n            setIsLoading(true);\r\n            const area = polygonPoints.map(polygonPoint => ([polygonPoint.lat, polygonPoint.lng]));\r\n            const result = await VehiclesApi.getVehiclesWithinArea(area);\r\n            setVehicles(result.data.vehicles);\r\n        } catch (error) {\r\n            setSnackbarData({ isOpen: true, text: 'Failed to fetch data', severity: 'error' });\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    };\r\n\r\n    const onClearPolygonPoints = () => {\r\n        setPolygonPoints([]);\r\n        setVehicles([]);\r\n    };\r\n\r\n    const closeSnackbar = () => {\r\n        setSnackbarData(prevState => ({ ...prevState, isOpen: false }));\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Grid container>\r\n                <Grid item xs={3}>\r\n                    <Box height=\"98vh\" >\r\n                        <ControlsComponent\r\n                            isLoading={isLoading}\r\n                            polygonPointsLength={polygonPoints.length}\r\n                            vehicles={vehicles}\r\n                            onFindVehicles={onFindVehicles}\r\n                            onClearPolygonPoints={onClearPolygonPoints}\r\n                        />\r\n                    </Box>\r\n                </Grid>\r\n                <Grid item xs={9}>\r\n                    <Box height=\"98vh\" >\r\n                        <MapComponent\r\n                            vehicles={vehicles}\r\n                            polygonPoints={polygonPoints}\r\n                            setPolygonPoints={setPolygonPoints}\r\n                            onClearPolygonPoints={onClearPolygonPoints}\r\n                        />\r\n                    </Box>\r\n                </Grid>\r\n            </Grid>\r\n            <Snackbar open={snackbarData.isOpen} autoHideDuration={4000} onClose={closeSnackbar}>\r\n                <Alert severity={snackbarData.severity} sx={{ width: '100%' }} onClose={closeSnackbar}>\r\n                    {snackbarData.text}\r\n                </Alert>\r\n            </Snackbar>\r\n        </>\r\n    );\r\n};\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HomePage } from './pages/home.page';\n\nReactDOM.render(\n    <React.StrictMode>\n        <HomePage />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}